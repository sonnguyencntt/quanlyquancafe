{"ast":null,"code":"import * as Types from './../constants/ActionType';\nimport callApi from './../ultis/apiCaller';\nexport const acFetchRoomsRequest = () => {\n  return (next, getstate, extra) => {\n    callApi('getdata', 'GET', null).then(res => {\n      console.log(getstate);\n      console.log('da  vao action');\n      next({\n        type: {\n          fetch_room: {\n            type: 'FETCH_ROOMS',\n            data: res.data\n          }\n        }\n      });\n    });\n  };\n};\nexport const acInsertRoomsRequest = (data, statusEvent) => {\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    if (statusEvent == true) {\n      callApi('insertdata', 'POST', data).then(res => {\n        console.log(res);\n\n        if (typeof res.data.error == 'undefined') {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              },\n              mroom_ontap: {\n                type: 'MODAL_HEADER_FOR_ONTAP_ROOM',\n                event: 'hide-modal'\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          console.log('sau disptach');\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      console.log('false nha');\n      callApi('updatedata', 'POST', data).then(res => {\n        console.log(data);\n\n        if (typeof res.data.error == \"undefined\") {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Chỉnh sửa dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              },\n              mroom_ontap: {\n                type: 'MODAL_HEADER_FOR_ONTAP_ROOM',\n                event: 'hide-modal'\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          console.log('sau disptach');\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n};\nexport const acInsertRooms = data => {\n  return {\n    type: data // type : Types.INSERT_PRODUCT,\n    // room,\n    // status\n\n  };\n}; // \n\nexport const acDeleteRoomsRequest = id => {\n  var status = {};\n  console.log(\"da vao ac\");\n  return next => {\n    callApi('deletedata', 'POST', id).then(res => {\n      console.log(res);\n\n      if (typeof res.data.error == \"undefined\") {\n        if (res.data.data == \"ERR-14-06-1999\") {\n          console.log('200');\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Xóa dữ liệu không thành công thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          console.log('sau disptach');\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          console.log('200');\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Xóa dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          console.log('sau disptach');\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        }\n      } //\n      else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n    });\n  };\n};\nexport const actDeleteProduct = product => {\n  return {\n    type: Types.DELETE_PRODUCT,\n    product\n  };\n};\nexport const acUpdateTableRequest = data => {\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    //if(statusEvent == true)\n    //{\n    callApi('updatedatatable', 'POST', data).then(res => {\n      console.log(data);\n\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Chỉnh sửa dữ liệu thành công ^-^',\n          display: 'show-alert'\n        }; // next(acInsertRooms(res.data, status))\n\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        console.log('sau disptach');\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    }); // }\n    // else{\n    //     console.log('false nha')\n    //     callApi('updatedata', 'POST', data).then(res =>{\n    //         console.log(data);\n    //       if(res.status == 200){\n    //         status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\n    //            display : 'show-alert'\n    //        }\n    //        // next(acInsertRooms(res.data, status))\n    //        next({type : {fetch_room : {\n    //            type : 'FETCH_ROOMS',\n    //            data : res.data\n    //        }, status_event :{\n    //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //            status:status\n    //        },\n    //        mroom_ontap : {\n    //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\n    //            event : 'hide-modal',\n    //                }, \n    //    }\n    //    })\n    //        status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Thêm mới dữ liệu thành công ^-^',\n    //            display : 'hide-alert'\n    //        }\n    //            console.log('sau disptach');\n    //        setTimeout(function(){\n    //            next({type : {status_event :{\n    //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //                status:status\n    //            }}})\n    //        }, 2000);\n    //       }\n    //    }).catch((err) =>{console.log(err)});\n    // }\n  };\n};\nexport const actUpdateProduct = product => {\n  return {\n    type: Types.UPDATE_PRODUCT,\n    product\n  };\n};\nexport const acSearchRoomsRequest = name => {\n  return next => {\n    callApi('searchdata', 'POST', name).then(res => {\n      console.log(res);\n      next({\n        type: {\n          fetch_room: {\n            type: 'FETCH_ROOMS',\n            data: res.data\n          }\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acFetchTableRequest = data => {\n  return next => {\n    callApi('gettable', 'POST', data).then(res => {\n      console.log('fetch table');\n      console.log(res);\n      next({\n        type: {\n          fetch_table: {\n            type: 'FETCH_TABLES',\n            data: res.data.data\n          },\n          table_count: {\n            type: 'FETCH_COUNT_TABLES',\n            count: res.data.count\n          },\n          table_index: {\n            type: 'FETCH_INDEX_TABLES',\n            index: data.index\n          }\n        }\n      }); //next(acFetchTable(res.data, data,''));\n    });\n  };\n};\nexport const acFetchTable = (tables, index, status, acForNavigation) => {\n  return {\n    type: Types.FETCH_TABLES,\n    data: acForNavigation,\n    status: status,\n    tables: {\n      data: tables.data,\n      count: tables.count,\n      index: index.index\n    }\n  };\n};\nexport const acFetchsttTableRequest = () => {\n  return next => {\n    callApi('getstt', 'get', null).then(res => {\n      console.log(res);\n      next(acFetchsttTable(res.data));\n    });\n  };\n};\nexport const acFetchsttTable = status => {\n  return {\n    type: Types.FETCH_STTTABLE,\n    status\n  };\n};\nexport const acSearchTablesRequest = (data, index) => {\n  return (next, getstate, extra) => {\n    callApi('searchtable', 'post', data).then(res => {\n      console.log(res);\n      console.log('da  vao action');\n      next(acFetchTable(res.data, index, ''));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // export const acFetchTable = (tables, index) =>{\n//     return {\n//         type : Types.FETCH_TABLES,\n//         tables : {\n//             data : tables.data,\n//             count : tables.count,\n//             index : index.index\n//         }\n//     }\n// }\n// export const acInsertTableRequest = (data) => {\n//     console.log(data);\n//     const value = 'end';\n//     var status  = {};\n//     return next =>{\n//          callApi('insertdatatable', 'POST', data).then(res =>{\n//              console.log(res);\n//            if(res.status == 200){\n//              status = {\n//                 status : 'success',\n//                 classcomponent : 'alert alert-success',\n//                 text : 'Thêm mới dữ liệu thành công ^-^',\n//                 display : 'show-alert'\n//             }\n//             next(acFetchTable(res.data,{index : 1}, status,{ data : 1,\n//                 type_navigation : \"NEW_CHANGE_NAVIGATION\",}))\n//             status = {\n//                 status : 'success',\n//                 classcomponent : 'alert alert-success',\n//                 text : 'Thêm mới dữ liệu thành công ^-^',\n//                 display : 'hide-alert'\n//             }\n//                 console.log('sau disptach');\n//             setTimeout(function(){\n//                 next(acFetchTable(res.data,{index : 1},status))\n//             }, 2000);\n//            }\n//            else{\n//                console.log('k lay duoc du lieu tu server')\n//             status = {\n//                 status : 'error',\n//                 classcomponent : 'alert alert-danger',\n//                 text : 'Thêm mới dữ liệu thất bại ! (T-T)'\n//             }\n//           // next(acInsertProducts([{}], status));\n//          }\n//         }).catch((err) =>{console.log(err)});\n//     };\n// }\n\nexport const acInsertTableRequest = (data, statusEvent) => {\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    //if(statusEvent == true)\n    //{\n    callApi('insertdatatable', 'POST', data).then(res => {\n      console.log(data);\n\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'show-alert'\n        }; // next(acInsertRooms(res.data, status))\n\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        console.log('sau disptach');\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    }); // }\n    // else{\n    //     console.log('false nha')\n    //     callApi('updatedata', 'POST', data).then(res =>{\n    //         console.log(data);\n    //       if(res.status == 200){\n    //         status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\n    //            display : 'show-alert'\n    //        }\n    //        // next(acInsertRooms(res.data, status))\n    //        next({type : {fetch_room : {\n    //            type : 'FETCH_ROOMS',\n    //            data : res.data\n    //        }, status_event :{\n    //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //            status:status\n    //        },\n    //        mroom_ontap : {\n    //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\n    //            event : 'hide-modal',\n    //                }, \n    //    }\n    //    })\n    //        status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Thêm mới dữ liệu thành công ^-^',\n    //            display : 'hide-alert'\n    //        }\n    //            console.log('sau disptach');\n    //        setTimeout(function(){\n    //            next({type : {status_event :{\n    //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //                status:status\n    //            }}})\n    //        }, 2000);\n    //       }\n    //    }).catch((err) =>{console.log(err)});\n    // }\n  };\n};\nexport const acDeleteTableRequest = data => {\n  console.log('delete table');\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    //if(statusEvent == true)\n    //{\n    callApi('deletedatatable', 'POST', data).then(res => {\n      console.log(data);\n\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'show-alert'\n        }; // next(acInsertRooms(res.data, status))\n\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Xóa dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        console.log('sau disptach');\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    }); // }\n    // else{\n    //     console.log('false nha')\n    //     callApi('updatedata', 'POST', data).then(res =>{\n    //         console.log(data);\n    //       if(res.status == 200){\n    //         status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\n    //            display : 'show-alert'\n    //        }\n    //        // next(acInsertRooms(res.data, status))\n    //        next({type : {fetch_room : {\n    //            type : 'FETCH_ROOMS',\n    //            data : res.data\n    //        }, status_event :{\n    //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //            status:status\n    //        },\n    //        mroom_ontap : {\n    //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\n    //            event : 'hide-modal',\n    //                }, \n    //    }\n    //    })\n    //        status = {\n    //            status : 'success',\n    //            classcomponent : 'alert alert-success',\n    //            text : 'Thêm mới dữ liệu thành công ^-^',\n    //            display : 'hide-alert'\n    //        }\n    //            console.log('sau disptach');\n    //        setTimeout(function(){\n    //            next({type : {status_event :{\n    //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n    //                status:status\n    //            }}})\n    //        }, 2000);\n    //       }\n    //    }).catch((err) =>{console.log(err)});\n    // }\n  };\n};","map":{"version":3,"sources":["C:/Doan1/QuanLyQuanCafe/ql_cafe/src/actions/index.js"],"names":["Types","callApi","acFetchRoomsRequest","next","getstate","extra","then","res","console","log","type","fetch_room","data","acInsertRoomsRequest","statusEvent","value","status","error","classcomponent","text","display","status_event","mroom_ontap","event","setTimeout","catch","err","acInsertRooms","acDeleteRoomsRequest","id","actDeleteProduct","product","DELETE_PRODUCT","acUpdateTableRequest","fetch_table","table_count","count","table_index","index","mtable_ontap","actUpdateProduct","UPDATE_PRODUCT","acSearchRoomsRequest","name","acFetchTableRequest","acFetchTable","tables","acForNavigation","FETCH_TABLES","acFetchsttTableRequest","acFetchsttTable","FETCH_STTTABLE","acSearchTablesRequest","acInsertTableRequest","acDeleteTableRequest"],"mappings":"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","sourcesContent":["import * as Types from './../constants/ActionType';\r\nimport callApi from './../ultis/apiCaller';\r\nexport const acFetchRoomsRequest = () => {\r\n     return (next, getstate, extra) =>{\r\n\r\n         callApi('getdata', 'GET', null).then(res =>{\r\n            console.log(getstate)\r\n\r\n             console.log('da  vao action');\r\n           \r\n           next({type : {\r\n               fetch_room :{\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }\r\n           }});\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acInsertRoomsRequest = (data, statusEvent) => {\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        if(statusEvent == true)\r\n        {\r\n            callApi('insertdata', 'POST', data).then(res =>{\r\n                console.log(res);\r\n              if(typeof res.data.error == 'undefined' ){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               mroom_ontap : {\r\n                   type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n                   event : 'hide-modal',\r\n                       }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n        }\r\n        else{\r\n            console.log('false nha')\r\n            callApi('updatedata', 'POST', data).then(res =>{\r\n                console.log(data);\r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               mroom_ontap : {\r\n                   type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n                   event : 'hide-modal',\r\n                       }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n        }\r\n   \r\n\r\n    };\r\n    \r\n}\r\nexport const acInsertRooms = (data) =>{\r\n    \r\n    return {\r\n\r\n        type : data\r\n        // type : Types.INSERT_PRODUCT,\r\n        // room,\r\n        // status\r\n    }\r\n}\r\n// \r\nexport const acDeleteRoomsRequest = (id) => {\r\n    var status  = {};\r\nconsole.log(\"da vao ac\")\r\n    return next =>{\r\n       \r\n         callApi('deletedata', 'POST', id).then(res =>{\r\n             console.log(res);\r\n           \r\n             if(typeof res.data.error == \"undefined\"){\r\n                 if(res.data.data == \"ERR-14-06-1999\")\r\n                 {\r\n                    console.log('200')\r\n                    status = {\r\n                       status : 'success',\r\n                       classcomponent : 'alert alert-success',\r\n                       text : 'Xóa dữ liệu không thành công thành công ^-^',\r\n                       display : 'show-alert'\r\n                   }\r\n                   \r\n       \r\n                   // next(acInsertRooms(res.data, status))\r\n                   next({type : { status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   },\r\n                 \r\n               }\r\n               })\r\n                   \r\n                   status = {\r\n                       status : 'success',\r\n                       classcomponent : 'alert alert-success',\r\n                       text : 'Thêm mới dữ liệu thành công ^-^',\r\n                       display : 'hide-alert'\r\n                   }\r\n                       console.log('sau disptach');\r\n                   setTimeout(function(){\r\n       \r\n       \r\n       \r\n                       next({type : {status_event :{\r\n                           type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                           status:status\r\n                       }}})\r\n       \r\n                   }, 2000);\r\n                 }\r\n                 else\r\n                 {\r\n                    console.log('200')\r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Xóa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n             \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n                 }\r\n                \r\n              }\r\n              //\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const actDeleteProduct = (product) =>{\r\n    return {\r\n        type : Types.DELETE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acUpdateTableRequest = (data) =>{\r\n\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        //if(statusEvent == true)\r\n        //{\r\n            callApi('updatedatatable', 'POST', data).then(res =>{\r\n                console.log(data);\r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n       // }\r\n        // else{\r\n        //     console.log('false nha')\r\n        //     callApi('updatedata', 'POST', data).then(res =>{\r\n        //         console.log(data);\r\n        //       if(res.status == 200){\r\n   \r\n        //         status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n        //            display : 'show-alert'\r\n        //        }\r\n               \r\n   \r\n        //        // next(acInsertRooms(res.data, status))\r\n        //        next({type : {fetch_room : {\r\n        //            type : 'FETCH_ROOMS',\r\n        //            data : res.data\r\n        //        }, status_event :{\r\n        //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //            status:status\r\n        //        },\r\n        //        mroom_ontap : {\r\n        //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n        //            event : 'hide-modal',\r\n        //                }, \r\n   \r\n        //    }\r\n        //    })\r\n               \r\n        //        status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Thêm mới dữ liệu thành công ^-^',\r\n        //            display : 'hide-alert'\r\n        //        }\r\n        //            console.log('sau disptach');\r\n        //        setTimeout(function(){\r\n   \r\n   \r\n   \r\n        //            next({type : {status_event :{\r\n        //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //                status:status\r\n        //            }}})\r\n   \r\n        //        }, 2000);\r\n        //       }\r\n            \r\n   \r\n              \r\n             \r\n        //    }).catch((err) =>{console.log(err)});\r\n        // }\r\n   \r\n\r\n    };\r\n\r\n}\r\nexport const actUpdateProduct = (product) =>{\r\n    return {\r\n        type : Types.UPDATE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acSearchRoomsRequest = (name) =>{\r\n\r\n    return next =>{\r\n       \r\n        callApi('searchdata', 'POST', name).then(res =>{\r\n            console.log(res);\r\n          \r\n            next({type : {\r\n                fetch_room :{\r\n                    type : 'FETCH_ROOMS',\r\n                    data : res.data\r\n                }\r\n            }});\r\n         \r\n       }).catch((err) => {console.log(err)})\r\n\r\n   };\r\n\r\n}\r\nexport const acFetchTableRequest = (data) => {\r\n   \r\n    return next =>{\r\n         callApi('gettable', 'POST',data ).then(res =>{\r\n            console.log('fetch table')\r\n\r\n             console.log(res);\r\n           \r\n             next({type : {\r\n                 fetch_table : {\r\n                     type : 'FETCH_TABLES',\r\n                     data : res.data.data\r\n                 },\r\n                 table_count : {\r\n                    type : 'FETCH_COUNT_TABLES',\r\n                    count : res.data.count\r\n                 },\r\n                 table_index : {\r\n                     type : 'FETCH_INDEX_TABLES',\r\n                     index : data.index\r\n                 }\r\n\r\n             }})\r\n           //next(acFetchTable(res.data, data,''));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchTable = (tables, index, status, acForNavigation) =>{\r\n   \r\n    return {\r\n        type : Types.FETCH_TABLES,\r\n       data : acForNavigation,\r\n        status : status,\r\n        tables : {\r\n            data : tables.data,\r\n            count : tables.count,\r\n            index : index.index\r\n        }\r\n    }\r\n}\r\nexport const acFetchsttTableRequest = () => {\r\n   \r\n    return next =>{\r\n       \r\n         callApi('getstt', 'get',null ).then(res =>{\r\n             console.log(res);\r\n           \r\n           next(acFetchsttTable(res.data));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchsttTable = (status) =>{\r\n    \r\n    return {\r\n        type : Types.FETCH_STTTABLE,\r\n        status\r\n    }\r\n}\r\nexport const acSearchTablesRequest = (data, index) => {\r\n    return (next, getstate, extra) =>{\r\n        callApi('searchtable', 'post', data).then(res =>{\r\n           console.log(res)\r\n\r\n            console.log('da  vao action');\r\n          \r\n          next(acFetchTable(res.data, index,''));\r\n         \r\n       }).catch((err)=>{console.log(err)});\r\n\r\n   };\r\n}\r\n// export const acFetchTable = (tables, index) =>{\r\n    \r\n//     return {\r\n//         type : Types.FETCH_TABLES,\r\n//         tables : {\r\n//             data : tables.data,\r\n//             count : tables.count,\r\n//             index : index.index\r\n//         }\r\n \r\n//     }\r\n// }\r\n// export const acInsertTableRequest = (data) => {\r\n//     console.log(data);\r\n//     const value = 'end';\r\n//     var status  = {};\r\n//     return next =>{\r\n                   \r\n\r\n//          callApi('insertdatatable', 'POST', data).then(res =>{\r\n//              console.log(res);\r\n//            if(res.status == 200){\r\n\r\n//              status = {\r\n//                 status : 'success',\r\n//                 classcomponent : 'alert alert-success',\r\n//                 text : 'Thêm mới dữ liệu thành công ^-^',\r\n//                 display : 'show-alert'\r\n//             }\r\n            \r\n\r\n//             next(acFetchTable(res.data,{index : 1}, status,{ data : 1,\r\n//                 type_navigation : \"NEW_CHANGE_NAVIGATION\",}))\r\n            \r\n//             status = {\r\n//                 status : 'success',\r\n//                 classcomponent : 'alert alert-success',\r\n//                 text : 'Thêm mới dữ liệu thành công ^-^',\r\n//                 display : 'hide-alert'\r\n//             }\r\n//                 console.log('sau disptach');\r\n//             setTimeout(function(){\r\n\r\n\r\n\r\n//                 next(acFetchTable(res.data,{index : 1},status))\r\n\r\n//             }, 2000);\r\n//            }\r\n//            else{\r\n//                console.log('k lay duoc du lieu tu server')\r\n//             status = {\r\n//                 status : 'error',\r\n//                 classcomponent : 'alert alert-danger',\r\n//                 text : 'Thêm mới dữ liệu thất bại ! (T-T)'\r\n//             }\r\n            \r\n//           // next(acInsertProducts([{}], status));\r\n//          }\r\n\r\n           \r\n          \r\n//         }).catch((err) =>{console.log(err)});\r\n\r\n//     };\r\n    \r\n// }\r\nexport const acInsertTableRequest = (data, statusEvent) => {\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        //if(statusEvent == true)\r\n        //{\r\n            callApi('insertdatatable', 'POST', data).then(res =>{\r\n                console.log(data);\r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n       // }\r\n        // else{\r\n        //     console.log('false nha')\r\n        //     callApi('updatedata', 'POST', data).then(res =>{\r\n        //         console.log(data);\r\n        //       if(res.status == 200){\r\n   \r\n        //         status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n        //            display : 'show-alert'\r\n        //        }\r\n               \r\n   \r\n        //        // next(acInsertRooms(res.data, status))\r\n        //        next({type : {fetch_room : {\r\n        //            type : 'FETCH_ROOMS',\r\n        //            data : res.data\r\n        //        }, status_event :{\r\n        //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //            status:status\r\n        //        },\r\n        //        mroom_ontap : {\r\n        //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n        //            event : 'hide-modal',\r\n        //                }, \r\n   \r\n        //    }\r\n        //    })\r\n               \r\n        //        status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Thêm mới dữ liệu thành công ^-^',\r\n        //            display : 'hide-alert'\r\n        //        }\r\n        //            console.log('sau disptach');\r\n        //        setTimeout(function(){\r\n   \r\n   \r\n   \r\n        //            next({type : {status_event :{\r\n        //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //                status:status\r\n        //            }}})\r\n   \r\n        //        }, 2000);\r\n        //       }\r\n            \r\n   \r\n              \r\n             \r\n        //    }).catch((err) =>{console.log(err)});\r\n        // }\r\n   \r\n\r\n    };\r\n    \r\n}\r\n\r\nexport const acDeleteTableRequest = (data) => {\r\n    console.log('delete table')\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        //if(statusEvent == true)\r\n        //{\r\n            callApi('deletedatatable', 'POST', data).then(res =>{\r\n                console.log(data);\r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Xóa dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   console.log('sau disptach');\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n       // }\r\n        // else{\r\n        //     console.log('false nha')\r\n        //     callApi('updatedata', 'POST', data).then(res =>{\r\n        //         console.log(data);\r\n        //       if(res.status == 200){\r\n   \r\n        //         status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n        //            display : 'show-alert'\r\n        //        }\r\n               \r\n   \r\n        //        // next(acInsertRooms(res.data, status))\r\n        //        next({type : {fetch_room : {\r\n        //            type : 'FETCH_ROOMS',\r\n        //            data : res.data\r\n        //        }, status_event :{\r\n        //            type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //            status:status\r\n        //        },\r\n        //        mroom_ontap : {\r\n        //            type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n        //            event : 'hide-modal',\r\n        //                }, \r\n   \r\n        //    }\r\n        //    })\r\n               \r\n        //        status = {\r\n        //            status : 'success',\r\n        //            classcomponent : 'alert alert-success',\r\n        //            text : 'Thêm mới dữ liệu thành công ^-^',\r\n        //            display : 'hide-alert'\r\n        //        }\r\n        //            console.log('sau disptach');\r\n        //        setTimeout(function(){\r\n   \r\n   \r\n   \r\n        //            next({type : {status_event :{\r\n        //                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n        //                status:status\r\n        //            }}})\r\n   \r\n        //        }, 2000);\r\n        //       }\r\n            \r\n   \r\n              \r\n             \r\n        //    }).catch((err) =>{console.log(err)});\r\n        // }\r\n   \r\n\r\n    };\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}