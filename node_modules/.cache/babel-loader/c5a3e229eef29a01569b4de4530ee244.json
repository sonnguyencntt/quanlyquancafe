{"ast":null,"code":"import * as Types from './../constants/ActionType';\nimport callApi from './../ultis/apiCaller';\nexport const acFetchRoomsRequest = () => {\n  return (next, getstate, extra) => {\n    callApi('getdata', 'GET', null).then(res => {\n      console.log(getstate);\n      console.log('da  vao action');\n      next({\n        type: {\n          fetch_room: {\n            type: 'FETCH_ROOMS',\n            data: res.data\n          }\n        }\n      });\n    });\n  };\n};\nexport const acInsertRoomsRequest = data => {\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    callApi('insertdata', 'POST', data).then(res => {\n      console.log(res);\n\n      if (res.status == 200) {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'show-alert'\n        }; // next(acInsertRooms(res.data, status))\n\n        next({\n          type: {\n            fetch_room: {\n              type: 'FETCH_ROOMS',\n              data: res.data\n            },\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            mroom_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_ROOM',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        console.log('sau disptach');\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        console.log('k lay duoc du lieu tu server');\n        status = {\n          status: 'error',\n          classcomponent: 'alert alert-danger',\n          text: 'Thêm mới dữ liệu thất bại ! (T-T)'\n        };\n        next(acInsertRooms([{}], status));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acInsertRooms = data => {\n  return {\n    type: data // type : Types.INSERT_PRODUCT,\n    // room,\n    // status\n\n  };\n}; // \n\nexport const acDeleteProductsRequest = id => {\n  return next => {\n    callApi('deletedata', 'POST', id).then(res => {\n      console.log(res.data);\n      next(actDeleteProduct(res.data));\n    });\n  };\n};\nexport const actDeleteProduct = product => {\n  return {\n    type: Types.DELETE_PRODUCT,\n    product\n  };\n};\nexport const acUpdateProductsRequest = table => {\n  return next => {\n    callApi('updatedata', 'POST', table).then(res => {\n      console.log(res);\n      next(actUpdateProduct(res.data));\n    }).catch(err => {\n      console.log(table);\n    });\n  };\n};\nexport const actUpdateProduct = product => {\n  return {\n    type: Types.UPDATE_PRODUCT,\n    product\n  };\n};\nexport const acSearchProductsRequest = name => {\n  return next => {\n    callApi('searchdata', 'POST', name).then(res => {\n      console.log(res); //next(acFetchProducts(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acFetchTableRequest = data => {\n  return next => {\n    callApi('gettable', 'POST', data).then(res => {\n      console.log('fetch table');\n      console.log(res);\n      next(acFetchTable(res.data, data, ''));\n    });\n  };\n};\nexport const acFetchTable = (tables, index, status, acForNavigation) => {\n  return {\n    type: Types.FETCH_TABLES,\n    data: acForNavigation,\n    status: status,\n    tables: {\n      data: tables.data,\n      count: tables.count,\n      index: index.index\n    }\n  };\n};\nexport const acFetchsttTableRequest = () => {\n  return next => {\n    callApi('getstt', 'get', null).then(res => {\n      console.log(res);\n      next(acFetchsttTable(res.data));\n    });\n  };\n};\nexport const acFetchsttTable = status => {\n  return {\n    type: Types.FETCH_STTTABLE,\n    status\n  };\n};\nexport const acSearchTablesRequest = (data, index) => {\n  return (next, getstate, extra) => {\n    callApi('searchtable', 'post', data).then(res => {\n      console.log(res);\n      console.log('da  vao action');\n      next(acFetchTable(res.data, index, ''));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // export const acFetchTable = (tables, index) =>{\n//     return {\n//         type : Types.FETCH_TABLES,\n//         tables : {\n//             data : tables.data,\n//             count : tables.count,\n//             index : index.index\n//         }\n//     }\n// }\n\nexport const acInsertTableRequest = data => {\n  console.log(data);\n  const value = 'end';\n  var status = {};\n  return next => {\n    callApi('insertdatatable', 'POST', data).then(res => {\n      console.log(res);\n\n      if (res.status == 200) {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'show-alert'\n        };\n        next(acFetchTable(res.data, {\n          index: 1\n        }, status, {\n          data: 1,\n          type_navigation: \"NEW_CHANGE_NAVIGATION\"\n        }));\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        console.log('sau disptach');\n        setTimeout(function () {\n          next(acFetchTable(res.data, {\n            index: 1\n          }, status));\n        }, 2000);\n      } else {\n        console.log('k lay duoc du lieu tu server');\n        status = {\n          status: 'error',\n          classcomponent: 'alert alert-danger',\n          text: 'Thêm mới dữ liệu thất bại ! (T-T)'\n        }; // next(acInsertProducts([{}], status));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Doan1/QuanLyQuanCafe/ql_cafe/src/actions/index.js"],"names":["Types","callApi","acFetchRoomsRequest","next","getstate","extra","then","res","console","log","type","fetch_room","data","acInsertRoomsRequest","value","status","classcomponent","text","display","status_event","mroom_ontap","event","setTimeout","acInsertRooms","catch","err","acDeleteProductsRequest","id","actDeleteProduct","product","DELETE_PRODUCT","acUpdateProductsRequest","table","actUpdateProduct","UPDATE_PRODUCT","acSearchProductsRequest","name","acFetchTableRequest","acFetchTable","tables","index","acForNavigation","FETCH_TABLES","count","acFetchsttTableRequest","acFetchsttTable","FETCH_STTTABLE","acSearchTablesRequest","acInsertTableRequest","type_navigation"],"mappings":"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","sourcesContent":["import * as Types from './../constants/ActionType';\r\nimport callApi from './../ultis/apiCaller';\r\nexport const acFetchRoomsRequest = () => {\r\n     return (next, getstate, extra) =>{\r\n\r\n         callApi('getdata', 'GET', null).then(res =>{\r\n            console.log(getstate)\r\n\r\n             console.log('da  vao action');\r\n           \r\n           next({type : {\r\n               fetch_room :{\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }\r\n           }});\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acInsertRoomsRequest = (data) => {\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n\r\n         callApi('insertdata', 'POST', data).then(res =>{\r\n             console.log(res);\r\n           if(res.status == 200){\r\n\r\n             status = {\r\n                status : 'success',\r\n                classcomponent : 'alert alert-success',\r\n                text : 'Thêm mới dữ liệu thành công ^-^',\r\n                display : 'show-alert'\r\n            }\r\n            \r\n\r\n            // next(acInsertRooms(res.data, status))\r\n            next({type : {fetch_room : {\r\n                type : 'FETCH_ROOMS',\r\n                data : res.data\r\n            }, status_event :{\r\n                type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                status:status\r\n            },\r\n            mroom_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n                event : 'hide-modal',\r\n                    }, \r\n\r\n        }\r\n        })\r\n            \r\n            status = {\r\n                status : 'success',\r\n                classcomponent : 'alert alert-success',\r\n                text : 'Thêm mới dữ liệu thành công ^-^',\r\n                display : 'hide-alert'\r\n            }\r\n                console.log('sau disptach');\r\n            setTimeout(function(){\r\n\r\n\r\n\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:status\r\n                }}})\r\n\r\n            }, 2000);\r\n           }\r\n           else{\r\n               console.log('k lay duoc du lieu tu server')\r\n            status = {\r\n                status : 'error',\r\n                classcomponent : 'alert alert-danger',\r\n                text : 'Thêm mới dữ liệu thất bại ! (T-T)'\r\n            }\r\n            \r\n            next(acInsertRooms([{}], status));\r\n           }\r\n\r\n           \r\n          \r\n        }).catch((err) =>{console.log(err)});\r\n\r\n    };\r\n    \r\n}\r\nexport const acInsertRooms = (data) =>{\r\n    \r\n    return {\r\n\r\n        type : data\r\n        // type : Types.INSERT_PRODUCT,\r\n        // room,\r\n        // status\r\n    }\r\n}\r\n// \r\nexport const acDeleteProductsRequest = (id) => {\r\n   \r\n    return next =>{\r\n       \r\n         callApi('deletedata', 'POST', id).then(res =>{\r\n             console.log(res.data);\r\n           \r\n           next(actDeleteProduct(res.data));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const actDeleteProduct = (product) =>{\r\n    return {\r\n        type : Types.DELETE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acUpdateProductsRequest = (table) =>{\r\n\r\n    return next =>{\r\n       \r\n        callApi('updatedata', 'POST', table).then(res =>{\r\n            console.log(res);\r\n          \r\n          next(actUpdateProduct(res.data));\r\n         \r\n       }).catch((err) => {console.log(table)})\r\n\r\n   };\r\n\r\n}\r\nexport const actUpdateProduct = (product) =>{\r\n    return {\r\n        type : Types.UPDATE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acSearchProductsRequest = (name) =>{\r\n\r\n    return next =>{\r\n       \r\n        callApi('searchdata', 'POST', name).then(res =>{\r\n            console.log(res);\r\n          \r\n          //next(acFetchProducts(res.data));\r\n         \r\n       }).catch((err) => {console.log(err)})\r\n\r\n   };\r\n\r\n}\r\nexport const acFetchTableRequest = (data) => {\r\n   \r\n    return next =>{\r\n         callApi('gettable', 'POST',data ).then(res =>{\r\n            console.log('fetch table')\r\n\r\n             console.log(res);\r\n           \r\n           next(acFetchTable(res.data, data,''));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchTable = (tables, index, status, acForNavigation) =>{\r\n   \r\n    return {\r\n        type : Types.FETCH_TABLES,\r\n       data : acForNavigation,\r\n        status : status,\r\n        tables : {\r\n            data : tables.data,\r\n            count : tables.count,\r\n            index : index.index\r\n        }\r\n    }\r\n}\r\nexport const acFetchsttTableRequest = () => {\r\n   \r\n    return next =>{\r\n       \r\n         callApi('getstt', 'get',null ).then(res =>{\r\n             console.log(res);\r\n           \r\n           next(acFetchsttTable(res.data));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchsttTable = (status) =>{\r\n    \r\n    return {\r\n        type : Types.FETCH_STTTABLE,\r\n        status\r\n    }\r\n}\r\nexport const acSearchTablesRequest = (data, index) => {\r\n    return (next, getstate, extra) =>{\r\n        callApi('searchtable', 'post', data).then(res =>{\r\n           console.log(res)\r\n\r\n            console.log('da  vao action');\r\n          \r\n          next(acFetchTable(res.data, index,''));\r\n         \r\n       }).catch((err)=>{console.log(err)});\r\n\r\n   };\r\n}\r\n// export const acFetchTable = (tables, index) =>{\r\n    \r\n//     return {\r\n//         type : Types.FETCH_TABLES,\r\n//         tables : {\r\n//             data : tables.data,\r\n//             count : tables.count,\r\n//             index : index.index\r\n//         }\r\n \r\n//     }\r\n// }\r\nexport const acInsertTableRequest = (data) => {\r\n    console.log(data);\r\n    const value = 'end';\r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n\r\n         callApi('insertdatatable', 'POST', data).then(res =>{\r\n             console.log(res);\r\n           if(res.status == 200){\r\n\r\n             status = {\r\n                status : 'success',\r\n                classcomponent : 'alert alert-success',\r\n                text : 'Thêm mới dữ liệu thành công ^-^',\r\n                display : 'show-alert'\r\n            }\r\n            \r\n\r\n            next(acFetchTable(res.data,{index : 1}, status,{ data : 1,\r\n                type_navigation : \"NEW_CHANGE_NAVIGATION\",}))\r\n            \r\n            status = {\r\n                status : 'success',\r\n                classcomponent : 'alert alert-success',\r\n                text : 'Thêm mới dữ liệu thành công ^-^',\r\n                display : 'hide-alert'\r\n            }\r\n                console.log('sau disptach');\r\n            setTimeout(function(){\r\n\r\n\r\n\r\n                next(acFetchTable(res.data,{index : 1},status))\r\n\r\n            }, 2000);\r\n           }\r\n           else{\r\n               console.log('k lay duoc du lieu tu server')\r\n            status = {\r\n                status : 'error',\r\n                classcomponent : 'alert alert-danger',\r\n                text : 'Thêm mới dữ liệu thất bại ! (T-T)'\r\n            }\r\n            \r\n          // next(acInsertProducts([{}], status));\r\n         }\r\n\r\n           \r\n          \r\n        }).catch((err) =>{console.log(err)});\r\n\r\n    };\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}