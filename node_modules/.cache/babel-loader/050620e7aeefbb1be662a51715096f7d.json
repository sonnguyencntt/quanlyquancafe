{"ast":null,"code":"define([\"../core\", \"../core/camelCase\", \"../var/rnothtmlwhite\", \"./var/acceptData\"], function (jQuery, camelCase, rnothtmlwhite, acceptData) {\n  \"use strict\";\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function (owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = Object.create(null); // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function (owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === \"string\") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function (owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function (owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the \"read\" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function (owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there's no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function (owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  return Data;\n});","map":{"version":3,"sources":["C:/Doan1/QuanLyQuanCafe/ql_cafe/node_modules/jquery/src/data/Data.js"],"names":["define","jQuery","camelCase","rnothtmlwhite","acceptData","Data","expando","uid","prototype","cache","owner","value","Object","create","nodeType","defineProperty","configurable","set","data","prop","get","key","undefined","access","remove","i","Array","isArray","map","match","length","isEmptyObject","hasData"],"mappings":"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","sourcesContent":["define( [\n\t\"../core\",\n\t\"../core/camelCase\",\n\t\"../var/rnothtmlwhite\",\n\t\"./var/acceptData\"\n], function( jQuery, camelCase, rnothtmlwhite, acceptData ) {\n\n\"use strict\";\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = Object.create( null );\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\n\nreturn Data;\n} );\n"]},"metadata":{},"sourceType":"script"}