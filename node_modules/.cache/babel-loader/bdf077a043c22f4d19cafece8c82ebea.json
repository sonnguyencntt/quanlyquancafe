{"ast":null,"code":"import * as Types from './../constants/ActionType';\nimport callApi from './../ultis/apiCaller';\nexport const acFetchRoomsRequest = () => {\n  return (next, getstate, extra) => {\n    callApi('getdata', 'GET', null).then(res => {\n      console.log(res);\n      next({\n        type: {\n          fetch_room: {\n            type: 'FETCH_ROOMS',\n            data: res.data\n          }\n        }\n      });\n    });\n  };\n};\nexport const acInsertRoomsRequest = (data, statusEvent) => {\n  var status = {};\n  return next => {\n    if (statusEvent == true) {\n      callApi('insertdata', 'POST', data).then(res => {\n        if (typeof res.data.error == 'undefined') {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              },\n              mroom_ontap: {\n                type: 'MODAL_HEADER_FOR_ONTAP_ROOM',\n                event: 'hide-modal'\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      callApi('updatedata', 'POST', data).then(res => {\n        if (typeof res.data.error == \"undefined\") {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Chỉnh sửa dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              },\n              mroom_ontap: {\n                type: 'MODAL_HEADER_FOR_ONTAP_ROOM',\n                event: 'hide-modal'\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n};\nexport const acInsertRooms = data => {\n  return {\n    type: data // type : Types.INSERT_PRODUCT,\n    // room,\n    // status\n\n  };\n}; // \n\nexport const acDeleteRoomsRequest = id => {\n  var status = {};\n  return next => {\n    callApi('deletedata', 'POST', id).then(res => {\n      if (typeof res.data.error == \"undefined\") {\n        if (res.data.data == \"ERR-14-06-1999\") {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Xóa dữ liệu không thành công thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Xóa dữ liệu thành công ^-^',\n            display: 'show-alert'\n          }; // next(acInsertRooms(res.data, status))\n\n          next({\n            type: {\n              fetch_room: {\n                type: 'FETCH_ROOMS',\n                data: res.data\n              },\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n          status = {\n            status: 'success',\n            classcomponent: 'alert alert-success',\n            text: 'Thêm mới dữ liệu thành công ^-^',\n            display: 'hide-alert'\n          };\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: status\n                }\n              }\n            });\n          }, 2000);\n        }\n      } //\n      else {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-danger',\n                  text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                  display: 'show-alert'\n                }\n              }\n            }\n          });\n          setTimeout(function () {\n            next({\n              type: {\n                status_event: {\n                  type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                  status: {\n                    status: 'success',\n                    classcomponent: 'alert alert-success',\n                    text: 'Thêm mới dữ liệu thành công ^-^',\n                    display: 'hide-alert'\n                  }\n                }\n              }\n            });\n          }, 2000);\n        }\n    });\n  };\n};\nexport const actDeleteProduct = product => {\n  return {\n    type: Types.DELETE_PRODUCT,\n    product\n  };\n};\nexport const acUpdateTableRequest = data => {\n  var status = {};\n  return next => {\n    //if(statusEvent == true)\n    //{\n    callApi('updatedatatable', 'POST', data).then(res => {\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Chỉnh sửa dữ liệu thành công ^-^',\n          display: 'show-alert'\n        }; // next(acInsertRooms(res.data, status))\n\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const actUpdateProduct = product => {\n  return {\n    type: Types.UPDATE_PRODUCT,\n    product\n  };\n};\nexport const acSearchRoomsRequest = name => {\n  return next => {\n    callApi('searchdata', 'POST', name).then(res => {\n      console.log(res);\n      next({\n        type: {\n          fetch_room: {\n            type: 'FETCH_ROOMS',\n            data: res.data\n          }\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acFetchTableRequest = data => {\n  return next => {\n    callApi('gettable', 'POST', data).then(res => {\n      next({\n        type: {\n          fetch_table: {\n            type: 'FETCH_TABLES',\n            data: res.data.data\n          },\n          table_count: {\n            type: 'FETCH_COUNT_TABLES',\n            count: res.data.count\n          },\n          table_index: {\n            type: 'FETCH_INDEX_TABLES',\n            index: data.index\n          }\n        }\n      });\n    });\n  };\n};\nexport const acFetchTable = (tables, index, status, acForNavigation) => {\n  return {\n    type: Types.FETCH_TABLES,\n    data: acForNavigation,\n    status: status,\n    tables: {\n      data: tables.data,\n      count: tables.count,\n      index: index.index\n    }\n  };\n};\nexport const acFetchsttTableRequest = () => {\n  return next => {\n    callApi('getstt', 'get', null).then(res => {\n      next(acFetchsttTable(res.data));\n    });\n  };\n};\nexport const acFetchsttTable = status => {\n  return {\n    type: Types.FETCH_STTTABLE,\n    status\n  };\n};\nexport const acSearchTablesRequest = (data, index) => {\n  return (next, getstate, extra) => {\n    callApi('searchtable', 'post', data).then(res => {\n      next(acFetchTable(res.data, index, ''));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acInsertTableRequest = (data, statusEvent) => {\n  var status = {};\n  return next => {\n    //if(statusEvent == true)\n    //{\n    callApi('insertdatatable', 'POST', data).then(res => {\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'show-alert'\n        };\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Thêm mới dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const acDeleteTableRequest = data => {\n  var status = {};\n  return next => {\n    callApi('deletedatatable', 'POST', data).then(res => {\n      if (typeof res.data.error == \"undefined\") {\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Xóa dữ liệu thành công ^-^',\n          display: 'show-alert'\n        };\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: status\n            },\n            fetch_table: {\n              type: 'FETCH_TABLES',\n              data: res.data.data\n            },\n            table_count: {\n              type: 'FETCH_COUNT_TABLES',\n              count: res.data.count\n            },\n            table_index: {\n              type: 'FETCH_INDEX_TABLES',\n              index: data.index\n            },\n            mtable_ontap: {\n              type: 'MODAL_HEADER_FOR_ONTAP_TABLE',\n              event: 'hide-modal'\n            }\n          }\n        });\n        status = {\n          status: 'success',\n          classcomponent: 'alert alert-success',\n          text: 'Xóa dữ liệu thành công ^-^',\n          display: 'hide-alert'\n        };\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: status\n              }\n            }\n          });\n        }, 2000);\n      } else {\n        next({\n          type: {\n            status_event: {\n              type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n              status: {\n                status: 'success',\n                classcomponent: 'alert alert-danger',\n                text: 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\n                display: 'show-alert'\n              }\n            }\n          }\n        });\n        setTimeout(function () {\n          next({\n            type: {\n              status_event: {\n                type: 'STATUS_EVENT_UPDATE_DELETE_INSERT',\n                status: {\n                  status: 'success',\n                  classcomponent: 'alert alert-success',\n                  text: 'Thêm mới dữ liệu thành công ^-^',\n                  display: 'hide-alert'\n                }\n              }\n            }\n          });\n        }, 2000);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Doan1/QuanLyQuanCafe/ql_cafe/src/actions/index.js"],"names":["Types","callApi","acFetchRoomsRequest","next","getstate","extra","then","res","console","log","type","fetch_room","data","acInsertRoomsRequest","statusEvent","status","error","classcomponent","text","display","status_event","mroom_ontap","event","setTimeout","catch","err","acInsertRooms","acDeleteRoomsRequest","id","actDeleteProduct","product","DELETE_PRODUCT","acUpdateTableRequest","fetch_table","table_count","count","table_index","index","mtable_ontap","actUpdateProduct","UPDATE_PRODUCT","acSearchRoomsRequest","name","acFetchTableRequest","acFetchTable","tables","acForNavigation","FETCH_TABLES","acFetchsttTableRequest","acFetchsttTable","FETCH_STTTABLE","acSearchTablesRequest","acInsertTableRequest","acDeleteTableRequest"],"mappings":"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","sourcesContent":["import * as Types from './../constants/ActionType';\r\nimport callApi from './../ultis/apiCaller';\r\nexport const acFetchRoomsRequest = () => {\r\n     return (next, getstate, extra) =>{\r\n\r\n         callApi('getdata', 'GET', null).then(res =>{\r\n           console.log(res);\r\n           next({type : {\r\n               fetch_room :{\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }\r\n           }});\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acInsertRoomsRequest = (data, statusEvent) => {\r\n   \r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        if(statusEvent == true)\r\n        {\r\n            callApi('insertdata', 'POST', data).then(res =>{\r\n              if(typeof res.data.error == 'undefined' ){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               mroom_ontap : {\r\n                   type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n                   event : 'hide-modal',\r\n                       }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n        }\r\n        else{\r\n\r\n            callApi('updatedata', 'POST', data).then(res =>{\r\n\r\n                if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               mroom_ontap : {\r\n                   type : 'MODAL_HEADER_FOR_ONTAP_ROOM',\r\n                   event : 'hide-modal',\r\n                       }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n        }\r\n   \r\n\r\n    };\r\n    \r\n}\r\nexport const acInsertRooms = (data) =>{\r\n    \r\n    return {\r\n\r\n        type : data\r\n        // type : Types.INSERT_PRODUCT,\r\n        // room,\r\n        // status\r\n    }\r\n}\r\n// \r\nexport const acDeleteRoomsRequest = (id) => {\r\n    var status  = {};\r\n\r\n\r\n    return next =>{\r\n       \r\n         callApi('deletedata', 'POST', id).then(res =>{\r\n\r\n            \r\n             if(typeof res.data.error == \"undefined\"){\r\n                 if(res.data.data == \"ERR-14-06-1999\")\r\n                 {\r\n\r\n                    status = {\r\n                       status : 'success',\r\n                       classcomponent : 'alert alert-success',\r\n                       text : 'Xóa dữ liệu không thành công thành công ^-^',\r\n                       display : 'show-alert'\r\n                   }\r\n                   \r\n       \r\n                   // next(acInsertRooms(res.data, status))\r\n                   next({type : { status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   },\r\n                 \r\n               }\r\n               })\r\n                   \r\n                   status = {\r\n                       status : 'success',\r\n                       classcomponent : 'alert alert-success',\r\n                       text : 'Thêm mới dữ liệu thành công ^-^',\r\n                       display : 'hide-alert'\r\n                   }\r\n\r\n                   setTimeout(function(){\r\n       \r\n       \r\n       \r\n                       next({type : {status_event :{\r\n                           type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                           status:status\r\n                       }}})\r\n       \r\n                   }, 2000);\r\n                 }\r\n                 else\r\n                 {\r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Xóa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {fetch_room : {\r\n                   type : 'FETCH_ROOMS',\r\n                   data : res.data\r\n               }, status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n             \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n                 }\r\n                \r\n              }\r\n              //\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const actDeleteProduct = (product) =>{\r\n    return {\r\n        type : Types.DELETE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acUpdateTableRequest = (data) =>{\r\n\r\n  \r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        //if(statusEvent == true)\r\n        //{\r\n            callApi('updatedatatable', 'POST', data).then(res =>{\r\n               \r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Chỉnh sửa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               // next(acInsertRooms(res.data, status))\r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n                   \r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n   \r\n   \r\n\r\n    };\r\n\r\n}\r\nexport const actUpdateProduct = (product) =>{\r\n    return {\r\n        type : Types.UPDATE_PRODUCT,\r\n        product\r\n    }\r\n}\r\nexport const acSearchRoomsRequest = (name) =>{\r\n\r\n    return next =>{\r\n       \r\n        callApi('searchdata', 'POST', name).then(res =>{\r\n          console.log(res);\r\n            next({type : {\r\n                fetch_room :{\r\n                    type : 'FETCH_ROOMS',\r\n                    data : res.data\r\n                }\r\n            }});\r\n         \r\n       }).catch((err) => {console.log(err)})\r\n\r\n   };\r\n\r\n}\r\nexport const acFetchTableRequest = (data) => {\r\n   \r\n    return next =>{\r\n         callApi('gettable', 'POST',data ).then(res =>{\r\n           \r\n           \r\n             next({type : {\r\n                 fetch_table : {\r\n                     type : 'FETCH_TABLES',\r\n                     data : res.data.data\r\n                 },\r\n                 table_count : {\r\n                    type : 'FETCH_COUNT_TABLES',\r\n                    count : res.data.count\r\n                 },\r\n                 table_index : {\r\n                     type : 'FETCH_INDEX_TABLES',\r\n                     index : data.index\r\n                 }\r\n\r\n             }})\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchTable = (tables, index, status, acForNavigation) =>{\r\n   \r\n    return {\r\n        type : Types.FETCH_TABLES,\r\n       data : acForNavigation,\r\n        status : status,\r\n        tables : {\r\n            data : tables.data,\r\n            count : tables.count,\r\n            index : index.index\r\n        }\r\n    }\r\n}\r\nexport const acFetchsttTableRequest = () => {\r\n   \r\n    return next =>{\r\n       \r\n         callApi('getstt', 'get',null ).then(res =>{\r\n           \r\n           next(acFetchsttTable(res.data));\r\n          \r\n        });\r\n\r\n    };\r\n}\r\nexport const acFetchsttTable = (status) =>{\r\n    \r\n    return {\r\n        type : Types.FETCH_STTTABLE,\r\n        status\r\n    }\r\n}\r\nexport const acSearchTablesRequest = (data, index) => {\r\n    return (next, getstate, extra) =>{\r\n        callApi('searchtable', 'post', data).then(res =>{\r\n          \r\n          \r\n          next(acFetchTable(res.data, index,''));\r\n         \r\n       }).catch((err)=>{console.log(err)});\r\n\r\n   };\r\n}\r\n\r\nexport const acInsertTableRequest = (data, statusEvent) => {\r\n   \r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n        //if(statusEvent == true)\r\n        //{\r\n            callApi('insertdatatable', 'POST', data).then(res =>{\r\n              \r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Thêm mới dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n      \r\n   \r\n\r\n    };\r\n    \r\n}\r\n\r\nexport const acDeleteTableRequest = (data) => {\r\n  \r\n    var status  = {};\r\n    return next =>{\r\n                   \r\n       \r\n            callApi('deletedatatable', 'POST', data).then(res =>{\r\n              if(typeof res.data.error == \"undefined\"){\r\n   \r\n                status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Xóa dữ liệu thành công ^-^',\r\n                   display : 'show-alert'\r\n               }\r\n               \r\n   \r\n               next({type : {\r\n                    status_event :{\r\n                   type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                   status:status\r\n               },\r\n               fetch_table : {\r\n                type : 'FETCH_TABLES',\r\n                data : res.data.data\r\n            },\r\n            table_count : {\r\n               type : 'FETCH_COUNT_TABLES',\r\n               count : res.data.count\r\n            },\r\n            table_index : {\r\n                type : 'FETCH_INDEX_TABLES',\r\n                index : data.index\r\n            }, \r\n            mtable_ontap : {\r\n                type : 'MODAL_HEADER_FOR_ONTAP_TABLE',\r\n                event : 'hide-modal',\r\n                    }, \r\n   \r\n           }\r\n           })\r\n               \r\n               status = {\r\n                   status : 'success',\r\n                   classcomponent : 'alert alert-success',\r\n                   text : 'Xóa dữ liệu thành công ^-^',\r\n                   display : 'hide-alert'\r\n               }\r\n               setTimeout(function(){\r\n   \r\n   \r\n   \r\n                   next({type : {status_event :{\r\n                       type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                       status:status\r\n                   }}})\r\n   \r\n               }, 2000);\r\n              }\r\n              else\r\n              {\r\n                next({type : {status_event :{\r\n                    type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                    status:{\r\n                        status : 'success',\r\n                        classcomponent : 'alert alert-danger',\r\n                        text : 'Đã xảy ra lỗi, vui lòng kiểm tra lại ^-^',\r\n                        display : 'show-alert'\r\n                    }\r\n                }}})\r\n                setTimeout(function(){\r\n   \r\n   \r\n   \r\n                    next({type : {status_event :{\r\n                        type : 'STATUS_EVENT_UPDATE_DELETE_INSERT',\r\n                        status:{\r\n                            status : 'success',\r\n                            classcomponent : 'alert alert-success',\r\n                            text : 'Thêm mới dữ liệu thành công ^-^',\r\n                            display : 'hide-alert'\r\n                        }\r\n                    }}})\r\n    \r\n                }, 2000);\r\n              }\r\n            \r\n   \r\n              \r\n             \r\n           }).catch((err) =>{console.log(err)});\r\n     \r\n   \r\n\r\n    };\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}