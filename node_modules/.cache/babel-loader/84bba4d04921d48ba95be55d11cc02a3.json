{"ast":null,"code":"import * as Types from '../../constants/ActionType'; // const initialState = {data : [{}],\n//    count : 0,\n//    index : 1\n// };\n///// count, index , data\n\nexport const data = (state = [{}], action) => {\n  let newState = [...state];\n\n  if (typeof action.type.fetch_table === \"undefined\") {\n    return newState;\n  } else {\n    switch (action.type.fetch_table.type) {\n      // case Types.FETCH_PRODUCTS:\n      //   newState = action.product\n      case Types.FETCH_TABLES:\n        newState = action.type.fetch_table.data;\n        return newState;\n      // case Types.DELETE_PRODUCT :\n      //   newState = action.product;\n      //   return newState; \n      //   case Types.UPDATE_PRODUCT :\n      //     newState = action.product;\n      //     return newState;     \n\n      default:\n        return newState;\n    }\n  }\n};\nexport const count = (state = 0, action) => {\n  let newState = state;\n\n  if (typeof action.type.table_count == \"undefined\") {\n    return newState;\n  } else {\n    switch (action.type.table_count.type) {\n      // case Types.FETCH_PRODUCTS:\n      //   newState = action.product\n      case Types.FETCH_COUNT_TABLES:\n        newState = action.type.table_count.count;\n        return newState;\n      // case Types.DELETE_PRODUCT :\n      //   newState = action.product;\n      //   return newState; \n      //   case Types.UPDATE_PRODUCT :\n      //     newState = action.product;\n      //     return newState;     \n\n      default:\n        return newState;\n    }\n  }\n};\nexport const index = (state = 1, action) => {\n  let newState = state;\n\n  if (typeof action.type.table_index == \"undefined\") {\n    return newState;\n  } else {\n    switch (action.type.table_index.type) {\n      // case Types.FETCH_PRODUCTS:\n      //   newState = action.product\n      case Types.FETCH_INDEX_TABLES:\n        newState = action.type.table_index.index;\n        return newState;\n      // case Types.DELETE_PRODUCT :\n      //   newState = action.product;\n      //   return newState; \n      //   case Types.UPDATE_PRODUCT :\n      //     newState = action.product;\n      //     return newState;     \n\n      default:\n        return newState;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Doan1/QuanLyQuanCafe/ql_cafe/src/reducers/Customer/table.js"],"names":["Types","data","state","action","newState","type","fetch_table","FETCH_TABLES","count","table_count","FETCH_COUNT_TABLES","index","table_index","FETCH_INDEX_TABLES"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB,C,CAEA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,CAAC,EAAD,CAAT,EAAgBC,MAAhB,KACpB;AAEE,MAAIC,QAAQ,GAAG,CAAC,GAAGF,KAAJ,CAAf;;AAEA,MAAG,OAAOC,MAAM,CAACE,IAAP,CAAYC,WAAnB,KAAmC,WAAtC,EAAkD;AAClD,WAAOF,QAAP;AACD,GAFC,MAIF;AAGE,YAAOD,MAAM,CAACE,IAAP,CAAYC,WAAZ,CAAwBD,IAA/B;AACE;AACA;AAEI,WAAKL,KAAK,CAACO,YAAX;AACIH,QAAAA,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAYC,WAAZ,CAAwBL,IAAnC;AACA,eAAOG,QAAP;AACJ;AACA;AACA;AACA;AACA;AACA;;AACF;AAAS,eAAOA,QAAP;AAbb;AAeD;AACA,CA5BM;AA6BP,OAAO,MAAMI,KAAK,GAAG,CAACN,KAAK,GAAG,CAAT,EAAaC,MAAb,KACrB;AACE,MAAIC,QAAQ,GAAGF,KAAf;;AAEA,MAAG,OAAOC,MAAM,CAACE,IAAP,CAAYI,WAAnB,IAAkC,WAArC,EAAiD;AAC/C,WAAOL,QAAP;AACD,GAFD,MAIF;AAGE,YAAOD,MAAM,CAACE,IAAP,CAAYI,WAAZ,CAAwBJ,IAA/B;AACE;AACA;AAEI,WAAKL,KAAK,CAACU,kBAAX;AACIN,QAAAA,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAYI,WAAZ,CAAwBD,KAAnC;AACA,eAAOJ,QAAP;AACJ;AACA;AACA;AACA;AACA;AACA;;AACF;AAAS,eAAOA,QAAP;AAbb;AAeD;AACA,CA3BM;AA4BP,OAAO,MAAMO,KAAK,GAAG,CAACT,KAAK,GAAG,CAAT,EAAaC,MAAb,KACrB;AAEE,MAAIC,QAAQ,GAAGF,KAAf;;AACA,MAAG,OAAOC,MAAM,CAACE,IAAP,CAAYO,WAAnB,IAAkC,WAArC,EAAiD;AAC/C,WAAOR,QAAP;AACD,GAFD,MAIA;AACE,YAAOD,MAAM,CAACE,IAAP,CAAYO,WAAZ,CAAwBP,IAA/B;AACE;AACA;AAEI,WAAKL,KAAK,CAACa,kBAAX;AACIT,QAAAA,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAYO,WAAZ,CAAwBD,KAAnC;AACA,eAAOP,QAAP;AACJ;AACA;AACA;AACA;AACA;AACA;;AACF;AAAS,eAAOA,QAAP;AAbb;AAeD;AAEF,CA1BM","sourcesContent":["import * as Types from '../../constants/ActionType';\r\n\r\n// const initialState = {data : [{}],\r\n//    count : 0,\r\n//    index : 1\r\n// };\r\n\r\n///// count, index , data\r\nexport const data = (state = [{}] , action) =>\r\n{\r\n\r\n  let newState = [...state];\r\n\r\n  if(typeof action.type.fetch_table === \"undefined\"){\r\n  return newState\r\n}\r\nelse\r\n{\r\n\r\n\r\n  switch(action.type.fetch_table.type){ \r\n    // case Types.FETCH_PRODUCTS:\r\n    //   newState = action.product\r\n   \r\n        case Types.FETCH_TABLES :\r\n            newState = action.type.fetch_table.data;\r\n            return newState;      \r\n        // case Types.DELETE_PRODUCT :\r\n        //   newState = action.product;\r\n        //   return newState; \r\n        //   case Types.UPDATE_PRODUCT :\r\n        //     newState = action.product;\r\n        //     return newState;     \r\n      default: return newState;\r\n  }\r\n}\r\n}\r\nexport const count = (state = 0 , action) =>\r\n{\r\n  let newState = state;\r\n\r\n  if(typeof action.type.table_count == \"undefined\"){\r\n    return newState\r\n  }\r\nelse\r\n{\r\n\r\n\r\n  switch(action.type.table_count.type){ \r\n    // case Types.FETCH_PRODUCTS:\r\n    //   newState = action.product\r\n   \r\n        case Types.FETCH_COUNT_TABLES :\r\n            newState = action.type.table_count.count;\r\n            return newState;      \r\n        // case Types.DELETE_PRODUCT :\r\n        //   newState = action.product;\r\n        //   return newState; \r\n        //   case Types.UPDATE_PRODUCT :\r\n        //     newState = action.product;\r\n        //     return newState;     \r\n      default: return newState;\r\n  }\r\n}\r\n}\r\nexport const index = (state = 1 , action) =>\r\n{\r\n\r\n  let newState = state;\r\n  if(typeof action.type.table_index == \"undefined\"){\r\n    return newState\r\n  }\r\n  else\r\n  {\r\n    switch(action.type.table_index.type ){ \r\n      // case Types.FETCH_PRODUCTS:\r\n      //   newState = action.product\r\n     \r\n          case Types.FETCH_INDEX_TABLES :\r\n              newState = action.type.table_index.index ;\r\n              return newState;      \r\n          // case Types.DELETE_PRODUCT :\r\n          //   newState = action.product;\r\n          //   return newState; \r\n          //   case Types.UPDATE_PRODUCT :\r\n          //     newState = action.product;\r\n          //     return newState;     \r\n        default: return newState;\r\n    }\r\n  }\r\n \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}